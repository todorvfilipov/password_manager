import tkinter as tk
from tkinter import simpledialog, messagebox
import sqlite3
from cryptography.fernet import Fernet, InvalidToken
import os

KEY_FILE = "encryption_key.txt"

# Database functions
def create_sqlite_database(filename):
    conn = sqlite3.connect(filename)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS passwords (
                        username TEXT PRIMARY KEY,
                        password BLOB NOT NULL)''')
    conn.commit()
    conn.close()

# Encryption key management
def generate_and_save_key():
    key = Fernet.generate_key()
    with open(KEY_FILE, "wb") as key_file:
        key_file.write(key)
    return key

def load_key():
    if os.path.exists(KEY_FILE):
        with open(KEY_FILE, "rb") as key_file:
            return key_file.read()
    return None

def get_key_from_user():
    while True:
        key = simpledialog.askstring("Encryption Key", "Enter your encryption key (base64-encoded):", show='*')
        if key:
            try:
                return key.encode()
            except ValueError:
                messagebox.showerror("Error", "Invalid key format, please try again.")
        else:
            messagebox.showerror("Error", "No key provided, exiting.")
            app.destroy()
            return None

# Encryption and decryption
def encrypt_password(password):
    return cipher_suite.encrypt(password.encode())

def decrypt_password(encrypted_password):
    try:
        return cipher_suite.decrypt(encrypted_password).decode()
    except InvalidToken:
        messagebox.showerror("Error", "Invalid encryption key!")
        return None

# Database operations
def add():
    username = entryName.get()
    password = entryPassword.get()
    if username and password:
        encrypted_password = encrypt_password(password)
        try:
            conn = sqlite3.connect("passwords.db")
            cursor = conn.cursor()
            cursor.execute("INSERT INTO passwords (username, password) VALUES (?, ?)", (username, encrypted_password))
            conn.commit()
            messagebox.showinfo("Success", "Password added successfully!")
        except sqlite3.Error as e:
            messagebox.showerror("Error", f"Error adding password: {e}")
        finally:
            if conn:
                conn.close()
    else:
        messagebox.showerror("Error", "Please enter both fields.")

def get():
    username = entryName.get()
    if username:
        try:
            conn = sqlite3.connect("passwords.db")
            cursor = conn.cursor()
            cursor.execute("SELECT password FROM passwords WHERE username = ?", (username,))
            result = cursor.fetchone()
            if result:
                decrypted_password = decrypt_password(result[0])
                if decrypted_password is not None:
                    messagebox.showinfo("Password", f"Password for {username} is {decrypted_password}")
            else:
                messagebox.showinfo("Password", f"No such username '{username}' exists.")
        except sqlite3.Error as e:
            messagebox.showerror("Error", f"Error retrieving password: {e}")
        finally:
            if conn:
                conn.close()
    else:
        messagebox.showerror("Error", "Please enter the username.")

def getlist():
    try:
        conn = sqlite3.connect("passwords.db")
        cursor = conn.cursor()
        cursor.execute("SELECT username, password FROM passwords")
        results = cursor.fetchall()
        if results:
            mess = "List of passwords:\n"
            for username, encrypted_password in results:
                decrypted_password = decrypt_password(encrypted_password)
                if decrypted_password is not None:
                    mess += f"Password for {username} is {decrypted_password}\n"
                else:
                    mess += f"Password for {username} could not be decrypted due to an invalid key.\n"
            messagebox.showinfo("Passwords", mess)
        else:
            messagebox.showinfo("Passwords", "No entries found.")
    except sqlite3.Error as e:
        messagebox.showerror("Error", f"Error retrieving list: {e}")
    finally:
        if conn:
            conn.close()

def delete():
    username = entryName.get()
    if username:
        try:
            conn = sqlite3.connect("passwords.db")
            cursor = conn.cursor()
            cursor.execute("DELETE FROM passwords WHERE username = ?", (username,))
            conn.commit()
            if cursor.rowcount > 0:
                messagebox.showinfo("Success", f"User '{username}' deleted successfully!")
            else:
                messagebox.showinfo("Error", f"No such username '{username}' exists.")
        except sqlite3.Error as e:
            messagebox.showerror("Error", f"Error deleting user '{username}': {e}")
        finally:
            if conn:
                conn.close()
    else:
        messagebox.showerror("Error", "Please enter the username.")

# Main application setup
if __name__ == "__main__":
    app = tk.Tk()
    app.withdraw()  # Hide the root window while initializing

    key = load_key()
    if key is None:
        key = generate_and_save_key()
        messagebox.showinfo("New Encryption Key", f"A new encryption key has been generated and saved. Please save this key securely: {key.decode()}")
    else:
        key = get_key_from_user()

    if key:
        try:
            cipher_suite = Fernet(key)
        except ValueError:
            messagebox.showerror("Error", "Invalid key format, exiting.")
            app.destroy()

        create_sqlite_database("passwords.db")

        app.deiconify()  # Show the root window after key input
        app.geometry("500x300")
        app.title("Password Manager")

        # Username entry
        labelName = tk.Label(app, text="Username:")
        labelName.grid(row=0, column=0, padx=10, pady=10)
        entryName = tk.Entry(app)
        entryName.grid(row=0, column=1, padx=10, pady=10)

        # Password entry
        labelPassword = tk.Label(app, text="Password:")
        labelPassword.grid(row=1, column=0, padx=10, pady=10)
        entryPassword = tk.Entry(app)
        entryPassword.grid(row=1, column=1, padx=10, pady=10)

        # Buttons
        buttonAdd = tk.Button(app, text="Add", width=10, command=add)
        buttonAdd.grid(row=2, column=0, padx=10, pady=10)

        buttonGet = tk.Button(app, text="Get", width=10, command=get)
        buttonGet.grid(row=2, column=1, padx=10, pady=10)

        buttonList = tk.Button(app, text="List All", width=10, command=getlist)
        buttonList.grid(row=3, column=0, padx=10, pady=10)

        buttonDelete = tk.Button(app, text="Delete", width=10, command=delete)
        buttonDelete.grid(row=3, column=1, padx=10, pady=10)

        app.mainloop()
